{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM3gNbvS3P33mnXOVnO40n9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# REGEX"],"metadata":{"id":"E0CI16MUQcSg"}},{"cell_type":"code","source":["import pandas as pd\n","import re\n","\n","# 1. Load data\n","df = pd.read_csv(\"emirates_reviews_stopwords.csv\")\n","\n","# Kolom teks hasil preprocessing\n","TEXT_COL = \"review_after_stopwords\"\n","\n","# 2. Definisikan regex pola\n","positive_pattern = r\"\\b(good|great|excellent|amazing|love|nice|awesome)\\b\"\n","negative_pattern = r\"\\b(bad|poor|delay|worst|terrible|hate|problem)\\b\"\n","\n","# 3. Buat kolom flag\n","df[\"is_positive\"] = df[TEXT_COL].fillna(\"\").str.contains(positive_pattern, flags=re.IGNORECASE, regex=True)\n","df[\"is_negative\"] = df[TEXT_COL].fillna(\"\").str.contains(negative_pattern, flags=re.IGNORECASE, regex=True)\n","\n","# 4. Hitung jumlah review positif/negatif\n","print(\"Jumlah review positif:\", df[\"is_positive\"].sum())\n","print(\"Jumlah review negatif:\", df[\"is_negative\"].sum())\n","\n","# 5. Tampilkan contoh review\n","print(\"\\nContoh review positif:\")\n","print(df[df[\"is_positive\"]][TEXT_COL].head(5).tolist())\n","\n","print(\"\\nContoh review negatif:\")\n","print(df[df[\"is_negative\"]][TEXT_COL].head(5).tolist())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ZTj2SxMQjhz","executionInfo":{"status":"ok","timestamp":1757939847476,"user_tz":-420,"elapsed":287,"user":{"displayName":"Maureen Fadhliphya","userId":"15534252903059071134"}},"outputId":"0d306485-8999-4861-9e27-c73abbdff241"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Jumlah review positif: 8609\n","Jumlah review negatif: 484\n","\n","Contoh review positif:\n","['beautiful love', 'good', 'love', 'excellent', 'nice looking easy use']\n","\n","Contoh review negatif:\n","['like experience travel economy migificent especially attendant good problem non veg food chicken curry üòû like yogurt beverages time want try business class country family thanku comfort country sep', 'quick smart easy navigate ticket purchasing best rest upi encourage traveller best air hostess polite ask drink food way nicely bad nuts thats normal serve treated check countersthe pilots special grace god good great job god bless team üôèüôèüôè', 'bad useless', 'poor company like lacks lots features time working', 'good excellent todays lahore dubai late u people inform passengers delays ur mention delay time overall good staff operative humble']\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2044937582.py:15: UserWarning: This pattern is interpreted as a regular expression, and has match groups. To actually get the groups, use str.extract.\n","  df[\"is_positive\"] = df[TEXT_COL].fillna(\"\").str.contains(positive_pattern, flags=re.IGNORECASE, regex=True)\n","/tmp/ipython-input-2044937582.py:16: UserWarning: This pattern is interpreted as a regular expression, and has match groups. To actually get the groups, use str.extract.\n","  df[\"is_negative\"] = df[TEXT_COL].fillna(\"\").str.contains(negative_pattern, flags=re.IGNORECASE, regex=True)\n"]}]}]}